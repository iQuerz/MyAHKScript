SetWorkingDir %A_ScriptDir%
CheckUpdate:
	request := ComObjCreate("Msxml2.XMLHTTP")
	request.Open("GET", "https://raw.githubusercontent.com/iQuerz/MyAHKScript/main/ver.txt", true)
	request.Send()
	while (request.readyState != 4 && A_Index <= 50) {	; Wait for response 5s max (50*100 = 5000ms).
		sleep 100
	}
	
	if (request.readyState != 4) {
		Goto Continue
	}
	
  	version := Trim(request.ResponseText, " `t`n") ;Trim the response
	if(currentVersion != version) {
		Run, ../Tools-Data/iQScriptNotifier.exe update
	}
	Continue:	;Continues to the script if update check fails
	SetTimer, CheckUpdate, 86400000 ;(that's every 24h)

#NoEnv
#SingleInstance, Force
#UseHook

!\::
	Suspend Toggle
	if(A_IsSuspended){
		Run, ../Tools-Data/iQScriptNotifier.exe off
	}
	else{
		Run, ../Tools-Data/iQScriptNotifier.exe on
	}
return

;AltQClose alt+q for close
!Q:: WinClose A

;AltWMinimize alt+w for minimize
!W:: WinMinimize A

;Alt8Del alt+8 for delete // this chonk code is for allowing you to use it as a delete function as well as to delete text
!8::
	IfWinActive ahk_class CabinetWClass
    {
        ControlGetFocus, FocusedControl, A
        If FocusedControl contains DirectUIHWND, SysListView
            SendInput, {AppsKey}d
        else
            SendInput, {Delete}
    }
    else
        SendInput, {Delete}
return
 +!8:: SendInput  +{Delete}
^+!8:: SendInput ^+{Delete}

;Alt9Home alt+9 for home
  !9:: SendInput   {Home}
 ^!9:: SendInput  ^{Home}
 +!9:: SendInput  +{Home}
^+!9:: SendInput ^+{Home}

;Alt0End alt+0 for end
  !0:: SendInput   {End}
 ^!0:: SendInput  ^{End}
 +!0:: SendInput  +{End}
^+!0:: SendInput ^+{End}

;AltEExplorer alt+e for file explorer // If you use any other 
!E:: Run C:\Windows\explorer.exe

;AltANotificationPanel alt+a for notifications
!A:: SendInput #a

;AltSScreenshot alt+s for screenshot (you have to set screensnip to PrtSc for this to work, Settings->Accessibility->Keyboard->Use PrtSc...)
!S:: SendInput {PrintScreen}

;LWinPowerToys Use windows key for PowerToys Run, but retain the functionality of other shortcuts using Windows key
#If A_PriorKey == "LWin"
	LWin Up::SendInput !r
#If

#If A_PriorKey == "RWin"
	RWin Up::SendInput !r
#If

;AltScrollHorizontalScroll alt+scroll up to scroll left and down to scroll right.
!WheelUp:: SendInput {WheelLeft}
!WheelDown:: SendInput {WheelRight}

;NumPadHomerowFloat Ctrl+CapsLock for Homerow NumPad. 'o' represents 0 because ; is used for arrow keys simulation(see below)
npadBubblePID = -1
numpad = false
^CapsLock::
	numpad := !numpad
	if(numpad == true){
		if(capsBubblePID == -1){
			Run, iQnumpad.ahk 0 930,,, npadBubblePID
			return
		}
		Process, Exist, %capsBubblePID%
		if (ErrorLevel){
			WinGetTitle, capsTitle, ahk_pid %capsBubblePID%
			WinGetPos, X, Y, ,, %capsTitle%
			if(X == 0){
				Run, iQnumpad.ahk 170 930,,, npadBubblePID
			}
			else {
				Run, iQnumpad.ahk 0 930,,, npadBubblePID
			}
		}
		else
			Run, iQnumpad.ahk 0 930,,, npadBubblePID
	}
return
#if numpad == true
	*a::1
	*s::2
	*d::3
	*f::4
	*g::5
	*h::6
	*j::7
	*k::8
	*l::9
	*o::0
#if

;CapsLockFloat CapsLock floating window
capsBubblePID = -1
*CapsLock::
	SendInput {CapsLock}
	check := GetKeyState("CapsLock", "T")
	if(check == 1){
		if(capsBubblePID == -1){
			Run, iQcaps.ahk 0 930,,, capsBubblePID
			return
		}
		Process, Exist, %npadBubblePID%
		if (ErrorLevel){
			WinGetTitle, npadTitle, ahk_pid %npadBubblePID%
			WinGetPos, X, Y, ,, %npadTitle%
			if(X == 0){
				Run, iQcaps.ahk 170 930,,, capsBubblePID
			}
			else{
				Run, iQcaps.ahk 0 930,,, capsBubblePID
			}
		}
		else
			Run, iQcaps.ahk 0 930,,, capsBubblePID
	}
return

;SemiColonArrowSim Next bit of the code is for simulating arrow keys with I, J, K, L while holding down ';'. Helpful when your hands are at the homerow position
SC0027 & I::Up
SC0027 & J::Left
SC0027 & K::Down
SC0027 & L::Right
+SC0027::Send +{SC0027}
SC0027::Send {SC0027}